import module1;
import sim;
import globals;

/*
 * Demonstration of a simple test using locally sequenced sources and sinks.
 */

defproc test ()
{
    // configuration parameters
    pint D_WIDTH = 8;
    pint NUM_D = 4;
    pint data[NUM_D];
    data = {0, 1, 2, 3};
    pint res[4];
    res = {0, 2, 4, 6};

    // instantiations
    module1::adders::serial_adder<D_WIDTH> add;
    
    // this example only uses sources and sinks with locally defined sequences
    sim::source_sequence_multi<D_WIDTH, 2, NUM_D, data, false, 1, false> src_i1;
    sim::source_sequence_multi<D_WIDTH, 2, NUM_D, data, false, 2, false> src_i2;
    sim::source_sequence<D_WIDTH, NUM_D, res, false, 0, false> oracle;
    
    sim::scoreboard::lockstep<D_WIDTH, 2, 1, 0, true> sb;
    
    // connections

    add.IN1 = src_i1.O[0];
    add.IN2 = src_i2.O[0];

    sb.IN[0] = src_i1.O[1];
    sb.IN[1] = src_i2.O[1];
    sb.OUT_D[0] = add.OUT;
    sb.OUT_M[0] = oracle.O;

    // enable sources
    src_i1.enable = Vdd;
    src_i2.enable = Vdd;
    oracle.enable = Vdd;
}
